package today.flux.module.implement.Misc;

import com.darkmagician6.eventapi.EventTarget;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.*;
import net.minecraft.util.ChatComponentText;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.IChatComponent;
import today.flux.event.PacketReceiveEvent;
import today.flux.module.Category;
import today.flux.module.Module;
import today.flux.module.value.BooleanValue;
import today.flux.utility.ChatUtils;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AntiExploit extends Module {

    public static BooleanValue exploitNotify = new BooleanValue("AntiExploit", "Notify", true);
    public static BooleanValue exploitQuit = new BooleanValue("AntiExploit", "Auto Leave", false);
    private final Pattern pattern = Pattern.compile(".*\\$\\{[^}]*}.*");

    public AntiExploit() {
        super("AntiExploit", Category.Misc, false);
        this.cantToggle = true;
    }

    @EventTarget
    public void checkExploit(PacketReceiveEvent e) {
        // Check Explosion Packet
        if (e.getPacket() instanceof S27PacketExplosion) {
            S27PacketExplosion packet = (S27PacketExplosion) e.packet;
            if (Math.abs(packet.motionX) > 99 || Math.abs(packet.motionY) > 99 || Math.abs(packet.motionZ) > 99) {
                this.processExploit("Explosion", "A");
                e.setCancelled(true);
            } else if (Math.abs(packet.strength) > 99) {
                this.processExploit("Explosion", "B");
                e.setCancelled(true);
            }
        } else if (e.getPacket() instanceof S02PacketChat) {
            S02PacketChat packet = (S02PacketChat) e.packet;
            Matcher matcher = this.pattern.matcher(packet.getChatComponent().getUnformattedText().toLowerCase());
            if (matcher.find()) {
                this.processExploit("Log4j", "A");
                e.setCancelled(true);
            }
        } else if (e.getPacket() instanceof S18PacketEntityTeleport) {
            S18PacketEntityTeleport packet = (S18PacketEntityTeleport) e.packet;
            if (Math.abs(packet.getX()) > 29999984 || Math.abs(packet.getZ()) > 29999984 || Math.abs(packet.getY()) > 29999984) {
                this.processExploit("Teleport", "A");
                e.setCancelled(true);
            }
        } else if (e.getPacket() instanceof S2APacketParticles) {
            S2APacketParticles packet = (S2APacketParticles) e.packet;
            if (Math.abs(packet.getParticleSpeed()) > 10) {
                this.processExploit("Particle", "A");
                e.setCancelled(true);
            } else if (packet.getParticleCount() > 500) {
                this.processExploit("Particle", "B");
                e.setCancelled(true);
            }
        } else if (e.getPacket() instanceof S2BPacketChangeGameState) {
            S2BPacketChangeGameState packet = (S2BPacketChangeGameState) e.packet;
            if (packet.getGameState() > 5 && (packet.func_149137_d() > 99 || packet.getGameState() > 99)) {
                this.processExploit("GameState", "A");
                e.setCancelled(true);
            }
        } else if (e.getPacket() instanceof S33PacketUpdateSign) {
            S33PacketUpdateSign packet = (S33PacketUpdateSign) e.packet;
            for (IChatComponent line : packet.getLines()) {
                if (mc.fontRendererObj.getStringWidth(line.getUnformattedText()) > 100) {
                    this.processExploit("Sign", "A");
                    e.setCancelled(true);
                    break;
                }
            }
        } else if (e.getPacket() instanceof S43PacketCamera) {
            S43PacketCamera packet = (S43PacketCamera) e.packet;
            if (!mc.thePlayer.isSpectator()) {
                this.processExploit("Camera", "A");
                e.setCancelled(true);
            }
        } else if (e.getPacket() instanceof S48PacketResourcePackSend) {
            S48PacketResourcePackSend packet = (S48PacketResourcePackSend) e.packet;
            try {
                URI uri = new URI(packet.getURL());
                String scheme = uri.getScheme();
                boolean isLevelProtocol = "level".equalsIgnoreCase(scheme);
                boolean isHttpProtocol = "http".equalsIgnoreCase(scheme);
                boolean isHttpsProtocol = "https".equalsIgnoreCase(scheme);

                if (!isHttpProtocol && !isHttpsProtocol && !isLevelProtocol) {
                    this.processExploit("ResourcePack", "A");
                    mc.thePlayer.sendQueue.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(packet.getHash(),
                            C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                    e.setCancelled(true);
                }

                if (isLevelProtocol && (packet.getURL().contains("..") || !packet.getURL().endsWith("/resources.zip"))) {
                    this.processExploit("ResourcePack", "B");
                    mc.thePlayer.sendQueue.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(packet.getHash(),
                            C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                    e.setCancelled(true);
                }

            } catch (URISyntaxException exception) {
                this.processExploit("ResourcePack", "C");
                mc.thePlayer.sendQueue.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(packet.getHash(),
                        C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                e.setCancelled(true);
            }
        }
    }


    public void processExploit(String module, String type) {
        if (exploitQuit.getValue()) {
            mc.thePlayer.sendQueue.getNetworkManager().closeChannel(new ChatComponentText(EnumChatFormatting.DARK_PURPLE + "[Flux] " + EnumChatFormatting.GRAY + "The server tried to send exploit packet: " + module + " (type:" + type + ")"));
        } else if (exploitNotify.getValue()) {
            ChatUtils.sendMessageToPlayer("The server tried to send exploit packet: " + module + " (type:" + type + ")");
        }
    }


}
